# -*- coding: utf-8 -*-
"""supply_chain_.Data Analysisipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X0QkFOH1bZAHKHz_UfIBTVnSUXHO_496

# To install pandas
"""

pip install pandas

"""This imports the pandas library and gives it the alias pd, which is a common convention.

Pandas is used for working with tabular data (rows and columns), such as CSV, Excel, SQL, etc.


"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Load the dataset
df = pd.read_csv('supply_chain_data.csv')
df

"""see data types (important before analysis or plotting)

Get row & column count

Verify large data memory usage
"""

# Show initial info
df.info()

# Summary statistics
df.describe()

"""Helps you identify missing data before analysis or modeling."""

# Check for missing values
df.isnull().sum()

"""To check for and clean duplicate data before analysis or modeling.

Helps ensure data quality.
"""

df.duplicated().sum()

"""# Which product sales most

This code creates a sky-blue bar chart using Seaborn to visualize the number of products sold by product type with labeled axes and a title
"""

plt.figure(figsize=(5, 4))
sns.barplot(x='Product type', y='Number of products sold', data=df, color='skyblue')
plt.title('product sales')
plt.xlabel('Product Type')
plt.ylabel('Total Number of Products Sold')
plt.show()

"""# Which product has least revenue

This code creates a red bar chart to compare product prices by type and identify the product with the least revenue potential.
"""

plt.figure(figsize=(5 ,4))
sns.barplot(x='Product type', y='Price',data=df,color='red')
plt.title('Which product has least revenue')
plt.xlabel('product type')
plt.ylabel('price')
plt.grid(True)
plt.show()

"""# Which product is more costly

This code generates a pie chart showing the percentage distribution of average prices across different product types with customized colors and labels
"""

a=df.groupby('Product type')['Price'].mean()

plt.figure(figsize=(5 ,4))
plt.pie(a, labels=a.index, autopct='%1.1f%%', colors=['violet', 'blue', 'green'])
plt.title('Average Price Distribution by Product Type')
plt.show()

"""# most costly product - cosmetics

This code creates a grouped bar chart comparing revenue generated by product type and transportation modes, with labeled axes, title, and grid.
"""

plt.figure(figsize=(5 ,4))
sns.barplot(x='Product type', y='Revenue generated', data=df,hue='Transportation modes')
plt.title('Revenue Generated vs. Number of Products Sold')
plt.xlabel('Number of Products Sold')
plt.ylabel('Revenue Generated')
plt.grid(True)
plt.show()

"""# Create Facet grid

Create a facet grid to visualize the relationship between 'Price' and 'Number of products sold' across different 'Product type' categories.
"""

g = sns.FacetGrid(df, col="Product type")
g.map(sns.scatterplot, "Price", "Number of products sold")
g.set_titles(col_template="{col_name}")
plt.show()

"""# Which location has more orders

This code creates a line plot showing order quantities across different locations with labeled axes and a title
"""

plt.figure(figsize=(5 ,4))
sns.lineplot(x='Location', y='Order quantities', data=df)
plt.xlabel('Location')
plt.ylabel('Order quantities')
plt.title('Order Quantities by Location')
plt.show()

# Show the distribution of 'Stock levels'
plt.figure(figsize=(8, 4))
sns.histplot(df['Stock levels'], bins=20)
plt.title('Stock Levels Distribution')
plt.xlabel('Stock levels')
plt.ylabel('Frequency')
plt.show()

"""# Customer demographics and Revenue generated -  unknown and next non - binary

This code creates a box plot to visualize the distribution of revenue generated across different customer demographics.
"""

plt.figure(figsize=(5 ,4))
sns.boxplot(x='Customer demographics',y='Revenue generated',data=df)
plt.xlabel('Customer demographics')
plt.ylabel('Revenue generated')
plt.title('Customer demographics and Revenue generated')
plt.show()

"""# Frequency of  Manufacturing costs

This code creates a green histogram to show the frequency distribution of manufacturing costs with labeled axes, title, and a horizontal grid.
"""

plt.figure(figsize=(5 ,4))
plt.hist(df['Manufacturing costs'], bins=20, color='green')
plt.title('Manufacturing costs')
plt.xlabel('Manufacturing costs')
plt.ylabel('Frequency')
plt.grid(axis='y')
plt.show()

"""# Manufacturing Costs by Product Type-  skincare (bangalore)

This code creates a grouped purple bar chart comparing manufacturing costs by product type across different locations.
"""

plt.figure(figsize=(5 ,4))
sns.barplot(x='Product type',y='Manufacturing costs',data=df, color='purple',hue='Location')
plt.xlabel('Product Type')
plt.ylabel('Manufacturing Costs')
plt.title('Manufacturing Costs by Product Type')
plt.show()

"""# Correlation Heatmap: Defect Rates vs. Manufacturing Costs

This code generates a heatmap to show the correlation between defect rates, manufacturing costs, and revenue generated with annotated values and a coolwarm color scheme.
"""

plt.figure(figsize=(2 ,2))
heatmap_data = df[['Defect rates', 'Manufacturing costs','Revenue generated']]
correlation_matrix_subset = heatmap_data.corr()
plt.figure(figsize=(6, 4))
sns.heatmap(correlation_matrix_subset, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap: Defect Rates vs. Manufacturing Costs')
plt.show()

"""# Count of Inspection Results by Location - pending

This code creates an orange count plot to display the frequency of different inspection results across the dataset.
"""

plt.figure(figsize=(5 ,4))
sns.countplot(x="Inspection results", data=df, color='orange')
plt.xlabel('Inspection Results')
plt.ylabel('Count')
plt.title('Count of Inspection Results by Location')
plt.show()

fig, axes = plt.subplots(nrows=5, ncols=2, figsize=(10, 15))
axes = axes.flatten()

# Plot 1: Total Number of Products Sold by Product Type
sns.barplot(x='Product type', y='Number of products sold', data=df, color='skyblue', ax=axes[0])
axes[0].set_title('Total Number of Products Sold by Product Type')
axes[0].set_xlabel('Product Type')
axes[0].set_ylabel('Total Number of Products Sold')

# Plot 2: Price by Product Type
sns.barplot(x='Product type', y='Price',data=df,color='red', ax=axes[1])
axes[1].set_title('Price by Product Type')
axes[1].set_xlabel('Product Type')
axes[1].set_ylabel('Price')
axes[1].grid(True)

# Calculate average price by product type for the pie chart
average_price_by_product = df.groupby('Product type')['Price'].mean()

# Plot 3: Average Price Distribution by Product Type (Pie Chart)
axes[2].pie(average_price_by_product, labels=average_price_by_product.index, autopct='%1.1f%%', colors=['violet', 'blue', 'green', 'orange', 'red', 'purple', 'brown', 'pink', 'gray', 'olive'])
axes[2].set_title('Average Price Distribution by Product Type')

# Plot 4: Revenue Generated vs. Number of Products Sold with Transportation Modes Hue
sns.barplot(x='Product type', y='Revenue generated', data=df,hue='Transportation modes', ax=axes[3])
axes[3].set_title('Revenue Generated by Product Type and Transportation Mode')
axes[3].set_xlabel('Product Type')
axes[3].set_ylabel('Revenue Generated')
axes[3].grid(True)

# Plot 5: Order Quantities by Location
sns.lineplot(x='Location', y='Order quantities', data=df, ax=axes[4])
axes[4].set_title('Order Quantities by Location')
axes[4].set_xlabel('Location')
axes[4].set_ylabel('Order quantities')

# Plot 6: Customer demographics and Revenue generated (Box Plot)
sns.boxplot(x='Customer demographics',y='Revenue generated',data=df, ax=axes[5])
axes[5].set_title('Revenue Generated by Customer Demographics')
axes[5].set_xlabel('Customer demographics')
axes[5].set_ylabel('Revenue Generated')

# Plot 7: Manufacturing costs histogram
axes[6].hist(df['Manufacturing costs'], bins=20, color='green')
axes[6].set_title('Manufacturing costs')
axes[6].set_xlabel('Manufacturing costs')
axes[6].set_ylabel('Frequency')
axes[6].grid(axis='y')

# Plot 8: Manufacturing Costs by Product Type and Location Hue
sns.barplot(x='Product type',y='Manufacturing costs',data=df, color='purple',hue='Location', ax=axes[7])
axes[7].set_title('Manufacturing Costs by Product Type and Location')
axes[7].set_xlabel('Product Type')
axes[7].set_ylabel('Manufacturing Costs')

# Plot 9: Correlation Heatmap: Defect Rates vs. Manufacturing Costs vs. Revenue Generated
heatmap_data = df[['Defect rates', 'Manufacturing costs','Revenue generated']]
correlation_matrix_subset = heatmap_data.corr()
sns.heatmap(correlation_matrix_subset, annot=True, cmap='coolwarm', fmt=".2f", ax=axes[8])
axes[8].set_title('Correlation Heatmap')

# Plot 10: Count of Inspection Results
sns.countplot(x="Inspection results", data=df, color='orange', ax=axes[9])
axes[9].set_title('Count of Inspection Results')
axes[9].set_xlabel('Inspection Results')
axes[9].set_ylabel('Count')


plt.tight_layout()
plt.show()

"""# Final Report"""

print("\nwhich product sales most - skincare")
print("\nWhich product has least revenue - haircare")
print("\nMost costly product - cosmetics")
print("\nTranspotation mode and revenue - Road (cosmetics)")
print("\nWhich location has more orders - chennai")
print("\nCustomer demographics and Revenue generated - unknown and next non - binary")
print("\nFrequency of Manufacturing costs - 98")
print("\nManufacturing Costs by Product Type- skincare (bangalore)")
print("\nCorrelation Heatmap: Defect Rates vs. Manufacturing Costs")
print("\nCount of Inspection Results by Location - pending")
print("\nEnd of Analysis Summary")